<%=
  params = {
    'cloud' => {
      'plugin' => 'azure',
      'properties' => {
        'azure' => {
          'credentials_source' => p('azure.credentials_source'),
          'environment' => p('azure.environment'),
          'subscription_id' => p('azure.subscription_id'),
          'resource_group_name' => p('azure.resource_group_name'),
          'use_managed_disks' => p('azure.use_managed_disks'),
          'ssh_user' => p('azure.ssh_user'),
          'parallel_upload_thread_num' => p('azure.parallel_upload_thread_num'),
          'pip_idle_timeout_in_minutes' => p('azure.pip_idle_timeout_in_minutes'),
          'debug_mode' => p('azure.debug_mode'),
          'keep_failed_vms' => p('azure.keep_failed_vms'),
          'enable_telemetry' => p('azure.enable_telemetry'),
          'enable_vm_boot_diagnostics' => p('azure.enable_vm_boot_diagnostics')
        },
        'agent' => {
          'ntp' => p('ntp')
        }
      }
    }
  }
  no_registry = p(['registry.username', 'registry.password', 'registry.host'], nil).nil?
  if !no_registry
    registry_settings = {
      'registry' => {
        'user' => p('registry.username'),
        'password' => p('registry.password'),
      },
    }
    params['cloud']['properties'] = params['cloud']['properties'].merge(registry_settings)

    if_p('registry.endpoint') do |endpoint|
      params['cloud']['properties']['registry']['endpoint'] = endpoint
    end.else do
      params['cloud']['properties']['registry']['endpoint'] = "http://#{p('registry.username')}:#{ERB::Util.url_encode(p('registry.password'))}@#{p('registry.host')}:#{p('registry.port')}"
    end
  end

  if_p('azure.location') do |location|
    params['cloud']['properties']['azure']['location'] = location
  end

  if p('azure.credentials_source') != "static" && p('azure.credentials_source') != "managed_identity"
    raise 'The value of "credentials_source" is invalid. Possible values: "static" and "managed_identity".'
  elsif p('azure.credentials_source') == "static"
    params['cloud']['properties']['azure']['tenant_id'] = p('azure.tenant_id')
    params['cloud']['properties']['azure']['client_id'] = p('azure.client_id')
    if_p('azure.client_secret') do |client_secret|
      params['cloud']['properties']['azure']['client_secret'] = client_secret
    end.else do
      certificate = p('azure.certificate', '')
      raise 'both "client_secret" and "certificate" are not provided. Please specify at least one of them.' if certificate.empty?
    end
  end

  if_p('azure.default_managed_identity.type') do |identity_type|
    if identity_type == 'SystemAssigned'
      params['cloud']['properties']['azure']['default_managed_identity'] = {
        "type" => identity_type
      }
    elsif identity_type == 'UserAssigned'
      params['cloud']['properties']['azure']['default_managed_identity'] = {
        "type" => identity_type,
        "user_assigned_identity_name" => p('azure.default_managed_identity.user_assigned_identity_name')
      }
    else
      raise 'The value of "azure.default_managed_identity.type" is invalid. Possible values: "SystemAssigned" and "UserAssigned".' 
    end
  end

  if_p('azure.storage_account_name') do |storage_account_name|
    params['cloud']['properties']['azure']['storage_account_name'] = storage_account_name
  end.else do
    if p('azure.use_managed_disks') == false
      raise 'storage_account_name cannot be nil if use_managed_disks is false. Please read https://bosh.io/docs/azure-cpi.html.'
    end
  end

  if_p('azure.ssh_public_key') do |ssh_public_key|
    params['cloud']['properties']['azure']['ssh_public_key'] = ssh_public_key
  end.else do
    raise '"ssh_public_key" is not set. Please read https://bosh.io/docs/azure-cpi.html.'
  end

  if_p('azure.default_security_group') do |default_security_group|
    params['cloud']['properties']['azure']['default_security_group'] = default_security_group
  end

  if p('azure.environment') == 'AzureStack'
    azure_stack = p('azure.azure_stack')
    resource = azure_stack['resource']
    raise '"resource" must be set for AzureStack' if resource.nil? || resource.empty?
    params['cloud']['properties']['azure']['azure_stack'] = {}
    params['cloud']['properties']['azure']['azure_stack']['domain'] = p('azure.azure_stack.domain')
    params['cloud']['properties']['azure']['azure_stack']['authentication'] = p('azure.azure_stack.authentication')
    params['cloud']['properties']['azure']['azure_stack']['resource'] = resource
    params['cloud']['properties']['azure']['azure_stack']['endpoint_prefix'] = p('azure.azure_stack.endpoint_prefix')
  end

  if_p('azure.isv_tracking_guid') do |isv_tracking_guid|
    raise 'Invalid "isv_tracking_guid", length of guid must be 36.' if isv_tracking_guid.length != 36
    params['cloud']['properties']['azure']['isv_tracking_guid'] = isv_tracking_guid
  end

  if_p('blobstore') do
    blobstore_params = {
      'provider' => p('blobstore.provider')
    }
    if p('blobstore.provider') == 's3'
      options_params = {
        'bucket_name' => p('blobstore.bucket_name'),
        'access_key_id' => p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']),
        'secret_access_key' => p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'])
      }
      def update_blobstore_options(options, manifest_key, rendered_key=manifest_key)
        value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
        options[rendered_key] = value unless value.nil?
      end
      update_blobstore_options(options_params, 'use_ssl')
      update_blobstore_options(options_params, 's3_port', 'port')
      update_blobstore_options(options_params, 'host')
      update_blobstore_options(options_params, 's3_force_path_style')
    elsif p('blobstore.provider') == 'local'
      options_params = {
        'blobstore_path' => p('blobstore.path')
      }
    else
      options_params = {
        'endpoint' => "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}",
        'user' => p('blobstore.agent.user'),
        'password' => p('blobstore.agent.password')
      }
    end
    blobstore_params['options'] = options_params
    params['cloud']['properties']['agent']['blobstore'] = blobstore_params
  end
  if_p('agent.mbus') do |mbus|
    params['cloud']['properties']['agent']['mbus'] = mbus
  end.else_if_p('nats') do
    params['cloud']['properties']['agent']['mbus'] = "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
  end
  
  JSON.dump(params)
%>
